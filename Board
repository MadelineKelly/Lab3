
package lab_3;

public class Board {
    
    private Spot[][] board;
    private Spot current, nextMove;
    private int size, c, r, Movecount;
    private String m;
    
    private static int[][] moves8 = { {+1,-2}, {+2,-1}, {+2,+1}, {+1,+2}, 
        {-1,+2}, {-2,+1}, {-2,-1}, {-1,-2} }; //array of all the possible knight moves 
    
    Board(int size)
    {
        this.size = size;
        board = new Spot[size][size]; //make new board
        
        //fill board with new Spots
        for (int i = 0; i < board.length; i++)
        {
           for(int j = 0; j < board[0].length; j++)
           {
               board[i][j] = new Spot();
           }
        }
    }   
    
    public String move(int pos, int count)
    { 
        count++; //value to determine if the board is full
        Movecount++; //keeps track of total number of times we call move()
        int cycle = 0; //value to cycle through possible moves in moves8[][], resets for every new position we call this method for 
        while(cycle < 8) 
        {
            int dc = moves8[cycle][0]; //move in column
            int dr = moves8[cycle][1]; //move in row
            c = (pos-1)%size;  //calculate value of c from pos
            r = (pos-1)/size;  //calculate value of r from pos
            current = board[r][c]; //current spot in the array
            current.visit();   //mark it as visited
            c = c + dc;    //generate new column position
            r = r + dr;    //generate new row position
            cycle++;       // increment cycle so that we don't do this move again at this spot
            if(c>=0 && c<size && r>=0 && r<size) //if we're on the board
            {
                if(board[r][c].getVisited()==false) //and the spot we want to go to hasn't already been visited
                {
                    nextMove = board[r][c]; //this is our new spot
                    nextMove.visit();       //mark it as visited
                    int nextPos = c + r*size + 1;   //generate new position from our column and row
                    m = move(nextPos, count);    //call move again with new position and updated count
                                                 //then assign a String variable to its output
                    
                    if (m.equals("Failure")) //if we don't have anymore possible moves at a certain spot, go up to the previous thing recursively called and make a new move there
                    {                        //if all possible moves for all spots are exhausted and m = failure, move() will return failure to Main
                    }
                    else //if we've found a solution, start tacking on our positions to the String m and move will return the final m to Main 
                    {   
                        m = Integer.toString(pos) + " " + m;
                        return m;
                    }
                }
            }
        } 
       
       if (count ==  size*size) //if we've made 25 valid moves (i.e. we've gone to every spot on the board once) then:
       {
           m = Integer.toString(pos); //this is the last position we went to 
           return m; //return this value and it will go back up to the while loop, go into the else part of "if(m.equals("Failure"))" and start going back up through, 
                     //adding to m in the order of the moves we went through (this is the recursion at work)
       }
       board[(pos-1)/size][(pos-1)%size].unvisit(); //if we haven't successfully visited the entire board, mark our current spot as unvisited and go back up through the recursion
       m = "Failure"; //m = "Failure" tells the recursive method to keep going through the while loop until we find a sequence of moves that works or we exhaust all our options and find no solution
       return m;
    }
    
    public int getMoves()
    {
        return Movecount;
    }
}   
